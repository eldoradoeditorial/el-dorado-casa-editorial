---
import BaseLayout from '../layouts/BaseLayout.astro';
import Card from '../components/ui/Card.astro';
import Button from '../components/ui/Button.astro';
import Badge from '../components/ui/Badge.astro';
import CallToAction from '../components/sections/CallToAction.astro';
import { siteData, booksData, formatPrice, getPurchaseHref, getBookCover, BOOK_GENRES } from '../utils/data';

// Datos base
const allBooks = booksData.catalog;
// Géneros normalizados desde utils (incluye "Todos" al inicio y sin duplicados)
const genres = BOOK_GENRES;
---

<BaseLayout 
  title={`Catálogo - ${siteData.name}`}
  description="Explora nuestro catálogo de libros: literatura de calidad, obras académicas y tesoros literarios cuidadosamente seleccionados."
>
  <!-- Hero Section -->
  <section class="section bg-gradient-to-br from-bg-primary to-bg-secondary">
    <div class="container">
      <div class="max-w-4xl mx-auto text-center">
        <h1 class="text-hero text-gradient-primary mb-6">Nuestro Catálogo</h1>
        <p class="text-lead mb-8">Descubre tesoros literarios cuidadosamente seleccionados</p>
        <p class="text-xl text-text-secondary mb-12 max-w-2xl mx-auto">
          Cada libro en nuestro catálogo ha sido elegido por su calidad literaria, 
          relevancia cultural y potencial para enriquecer la experiencia del lector.
        </p>
      </div>
    </div>
  </section>

  <!-- Filtros -->
  <section class="section pt-8">
    <div class="container">
      <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <div class="flex flex-wrap items-center gap-4">
          <h3 class="font-semibold text-primary-dark">Filtrar por género:</h3>

          <div class="flex flex-wrap gap-2" id="chips-generos">
            {genres.map((g, i) => (
              <button
                type="button"
                data-genero-btn={g}
                class={`px-4 py-2 text-sm rounded-full transition-colors border
                  ${i === 0 
                    ? 'bg-primary text-white border-primary' 
                    : 'border-gray-300 hover:border-primary hover:text-primary'}`}
              >
                {g}
              </button>
            ))}
          </div>

          <!-- Ordenar -->
          <div class="ml-auto">
            <select id="orden-select" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-primary focus:border-primary">
              <option value="recientes" selected>Más recientes</option>
              <option value="az">Alfabético A-Z</option>
              <option value="za">Alfabético Z-A</option>
              <option value="precio-asc">Precio: menor a mayor</option>
              <option value="precio-desc">Precio: mayor a menor</option>
            </select>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Listado -->
  <section class="section pt-0">
    <div class="container">
      <div class="mb-12">
        <h2 id="catalogo-titulo" class="text-3xl font-display font-bold text-primary-dark mb-4">
          Todos los Libros
        </h2>
        <p id="catalogo-sub" class="text-text-secondary">
          Explora nuestra colección completa.
        </p>
      </div>

      <div id="catalogo-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {allBooks.map((libro) => (
          <Card
            variant="outlined"
            hover={true}
            class="overflow-hidden"
            data-genero={libro.genero}
            data-titulo={libro.titulo}
            data-precio={libro.precio}
            data-anio={libro.año}
          >
            <!-- Portada -->
            <figure class="rounded-lg overflow-hidden bg-gray-100 mb-4">
              <img
                src={getBookCover(libro)}
                alt={`Portada: ${libro.titulo}`}
                class="w-full h-full object-cover"
                loading="lazy"
                decoding="async"
              />
            </figure>

            <div class="space-y-3">
              <div>
                <div class="flex items-center justify-between mb-2">
                  <Badge variant="secondary" size="sm">{libro.genero}</Badge>
                  <span class="text-text-muted text-xs">{libro.año}</span>
                </div>
                <h3 class="text-lg font-display font-semibold text-primary-dark line-clamp-2">
                  {libro.titulo}
                </h3>
                <p class="text-text-muted text-sm">por {libro.autor}</p>
              </div>

              {libro.sinopsis && (
                <p class="text-text-secondary text-sm line-clamp-2 whitespace-pre-line">
                  {libro.sinopsis}
                </p>
              )}

              <!-- (opcional) metadatos breves -->
              <p class="text-xs text-text-muted">
                {libro.idioma}{libro.formato?.length ? ` · ${libro.formato.join(', ')}` : ''}
              </p>

              <div class="flex items-center justify-between pt-3 border-t border-gray-100">
                <span class="text-lg font-semibold text-gold">{formatPrice(libro.precio)}</span>
                <div class="space-x-2">
                  <Button variant="ghost" size="sm" href={`/catalogo/${libro.id}`}>Ver</Button>
                  {(() => {
                    const href = getPurchaseHref(libro);
                    const ext = href.startsWith('http');
                    return (
                      <Button variant="primary" size="sm" href={href} target={ext ? '_blank' : undefined}>
                        Comprar
                      </Button>
                    );
                  })()}
                </div>
              </div>
            </div>
          </Card>
        ))}
      </div>

      <!-- Paginación dinámica -->
      <div id="paginacion" class="flex justify-center mt-12 hidden">
        <div id="paginacion-inner" class="flex space-x-2"></div>
      </div>
    </div>
  </section>

  <!-- Newsletter -->
  <CallToAction
    title="¿Quieres conocer nuestras novedades?"
    description="Suscríbete a nuestro boletín y sé el primero en conocer nuestros nuevos lanzamientos."
    variant="newsletter"
  />
</BaseLayout>

<!-- JS simple (sin TypeScript): filtro + orden + paginación -->
<script is:inline>
  (function () {
    const PAGE_SIZE = 9; // cambia este valor si quieres 6, 12, etc.

    const grid = document.getElementById('catalogo-grid');
    const buttons = Array.from(document.querySelectorAll('[data-genero-btn]'));
    const cards   = Array.from(grid.querySelectorAll('[data-genero]'));
    const titleEl = document.getElementById('catalogo-titulo');
    const subEl   = document.getElementById('catalogo-sub');
    const selectOrden = document.getElementById('orden-select');
    const pag = document.getElementById('paginacion');
    const pagInner = document.getElementById('paginacion-inner');

    let currentSort = selectOrden.value || 'recientes';
    let currentPage = 1;

    function setActive(btn) {
      buttons.forEach((b) => {
        b.classList.remove('bg-primary','text-white','border-primary');
        b.classList.add('border-gray-300','hover:border-primary','hover:text-primary');
      });
      btn.classList.add('bg-primary','text-white','border-primary');
      btn.classList.remove('border-gray-300','hover:border-primary','hover:text-primary');
    }

    function applyFilter(genero) {
      cards.forEach((card) => {
        const match = genero === 'Todos' || card.dataset.genero === genero;
        // El filtro usa la clase 'hidden'; la paginación usará style.display
        card.classList.toggle('hidden', !match);
        // Quitar display:none previo de paginación; lo recolocamos al paginar
        card.style.display = '';
      });

      if (titleEl && subEl) {
        if (genero === 'Todos') {
          titleEl.textContent = 'Todos los Libros';
          subEl.textContent   = 'Explora nuestra colección completa.';
        } else {
          titleEl.textContent = 'Género: ' + genero;
          subEl.textContent   = 'Explora nuestra selección en ' + genero + '.';
        }
      }
    }

    function comparator(a, b) {
      switch (currentSort) {
        case 'az':
          return (a.dataset.titulo || '').localeCompare(b.dataset.titulo || '', 'es', { sensitivity: 'base' });
        case 'za':
          return (b.dataset.titulo || '').localeCompare(a.dataset.titulo || '', 'es', { sensitivity: 'base' });
        case 'precio-asc':
          return Number(a.dataset.precio || 0) - Number(b.dataset.precio || 0);
        case 'precio-desc':
          return Number(b.dataset.precio || 0) - Number(a.dataset.precio || 0);
        case 'recientes':
        default:
          return Number(b.dataset.anio || 0) - Number(a.dataset.anio || 0); // más recientes primero
      }
    }

    function sortCards() {
      const sorted = cards.slice().sort(comparator);
      sorted.forEach((c) => grid.appendChild(c)); // reordenar en el DOM
    }

    function visibleCards() {
      return cards.filter((c) => !c.classList.contains('hidden'));
    }

    function applyPage(page) {
      const vis = visibleCards();
      const totalPages = Math.ceil(vis.length / PAGE_SIZE) || 1;
      currentPage = Math.min(Math.max(page, 1), totalPages);

      // Oculta con display:none los que no van en la página actual (sin tocar 'hidden' del filtro)
      vis.forEach((c, idx) => {
        const start = (currentPage - 1) * PAGE_SIZE;
        const end   = currentPage * PAGE_SIZE;
        c.style.display = (idx >= start && idx < end) ? '' : 'none';
      });

      // Los que ya estaban ocultos por filtro, mantenerlos en none
      cards.forEach((c) => {
        if (c.classList.contains('hidden')) c.style.display = 'none';
      });

      renderPagination(); // actualizar los botones
    }

    function renderPagination() {
      const vis = visibleCards();
      const totalPages = Math.ceil(vis.length / PAGE_SIZE);

      if (totalPages <= 1) {
        pag.classList.add('hidden');
        return;
      }
      pag.classList.remove('hidden');

      pagInner.innerHTML = '';

      function makeBtn(label, page, opts) {
        const btn = document.createElement('button');
        btn.textContent = label;
        btn.className = 'px-4 py-2 rounded-lg border';
        if (opts?.active) {
          btn.className += ' bg-primary text-white border-primary';
        } else if (opts?.disabled) {
          btn.className += ' text-text-muted cursor-not-allowed';
          btn.disabled = true;
        } else {
          btn.className += ' hover:bg-primary hover:text-white transition-colors';
        }
        btn.addEventListener('click', () => applyPage(page));
        return btn;
      }

      // Anterior
      pagInner.appendChild(makeBtn('Anterior', Math.max(1, currentPage - 1), { disabled: currentPage === 1 }));

      // Números
      for (let p = 1; p <= totalPages; p++) {
        pagInner.appendChild(makeBtn(String(p), p, { active: p === currentPage }));
      }

      // Siguiente
      pagInner.appendChild(makeBtn('Siguiente', Math.min(totalPages, currentPage + 1), { disabled: currentPage === totalPages }));
    }

    // Eventos
    buttons.forEach((btn) => {
      btn.addEventListener('click', () => {
        setActive(btn);
        applyFilter(btn.getAttribute('data-genero-btn') || 'Todos');
        sortCards();
        applyPage(1);
      });
    });

    selectOrden.addEventListener('change', () => {
      currentSort = selectOrden.value;
      sortCards();
      applyPage(1);
    });

    // Estado inicial
    const first = buttons.find((b) => b.getAttribute('data-genero-btn') === 'Todos') || buttons[0];
    if (first) setActive(first);
    applyFilter('Todos');
    sortCards();
    applyPage(1);
  })();
</script>
