---
import Button from '../ui/Button.astro';

export interface Props {
  title: string;
  description: string;
  primaryButton?: {
    text: string;
    href: string;
    variant?: 'primary' | 'gold' | 'secondary';
  };
  secondaryButton?: {
    text: string;
    href: string;
    variant?: 'ghost' | 'secondary' | 'primary';
  };
  showNewsletterForm?: boolean;
  variant?: 'default' | 'newsletter';
}

const {
  title,
  description,
  primaryButton,
  secondaryButton,
  showNewsletterForm = false,
  variant = 'default'
} = Astro.props;
---

<section class="section bg-primary-dark text-white">
  <div class="container text-center">
    <h2 class="text-3xl md:text-4xl font-display font-bold mb-6 text-white">
      {title}
    </h2>
    <p class="text-xl mb-8 max-w-2xl mx-auto text-white/90">
      {description}
    </p>

    {variant === 'newsletter' || showNewsletterForm ? (
      /* Newsletter (form real para Netlify + feedback inline) */
      <form
        name="newsletter"
        method="POST"
        data-netlify="true"
        netlify-honeypot="bot-field"
        data-newsletter
        class="max-w-md mx-auto flex items-stretch gap-3"
      >
        {/* Requisitos Netlify */}
        <input type="hidden" name="form-name" value="newsletter" />
        <input type="text" name="bot-field" class="hidden" tabindex="-1" autocomplete="off" />

        <input
          type="email"
          name="email"
          required
          placeholder="Tu correo electrónico"
          class="flex-1 px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/70 focus:outline-none focus:ring-2 focus:ring-gold focus:border-transparent"
        />

        {/* Usamos <button> nativo para poder enviar el form */}
        <button
          type="submit"
          class="px-6 rounded-lg bg-gold text-primary-dark font-semibold hover:brightness-110 transition"
        >
          Suscribirse
        </button>

        {/* Feedback inline */}
        <span class="hidden items-center gap-2 text-emerald-300 font-medium" data-newsletter-ok>
          <svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
            <path d="M16.7 5.3a1 1 0 0 1 0 1.4l-8 8a1 1 0 0 1-1.4 0l-4-4a1 1 0 1 1 1.4-1.4l3.3 3.3 7.3-7.3a1 1 0 0 1 1.4 0Z"/>
          </svg>
          Suscrito
        </span>
        <span class="hidden items-center gap-2 text-rose-300 font-medium" data-newsletter-error>
          Ocurrió un error. Inténtalo de nuevo.
        </span>
      </form>
    ) : (
      /* CTAs normales: intactos */
      <div class="flex flex-col sm:flex-row gap-4 justify-center">
        {primaryButton && (
          <Button 
            variant={primaryButton.variant || 'gold'} 
            size="lg" 
            href={primaryButton.href}
          >
            {primaryButton.text}
          </Button>
        )}
        {secondaryButton && (
          <Button 
            variant={secondaryButton.variant || 'ghost'} 
            size="lg" 
            href={secondaryButton.href}
            class="border-2 border-white text-white hover:bg-white hover:text-primary-dark"
          >
            {secondaryButton.text}
          </Button>
        )}
      </div>
    )}
  </div>

  {/* Script local: captura este (y cualquier otro) form con data-newsletter */}
  <script is:inline>
    (() => {
      async function submitNetlifyForm(form) {
        const btn = form.querySelector('button[type="submit"]');
        const ok = form.querySelector('[data-newsletter-ok]');
        const err = form.querySelector('[data-newsletter-error]');
        ok?.classList.add('hidden'); err?.classList.add('hidden');

        const data = new FormData(form);
        if (!data.get('form-name')) data.set('form-name', form.getAttribute('name') || 'newsletter');

        try {
          if (btn) btn.disabled = true;
          const res = await fetch('/', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams([...data]).toString(),
          });

          if (res.ok) { form.reset(); ok?.classList.remove('hidden'); }
          else { err?.classList.remove('hidden'); }
        } catch {
          err?.classList.remove('hidden');
        } finally {
          if (btn) btn.disabled = false;
          setTimeout(() => { ok?.classList.add('hidden'); err?.classList.add('hidden'); }, 4000);
        }
      }

      document.currentScript?.parentElement
        ?.querySelectorAll('form[data-newsletter]')
        .forEach((form) => {
          form.addEventListener('submit', (ev) => {
            ev.preventDefault();
            submitNetlifyForm(form);
          });
        });
    })();
  </script>
</section>
